import type { NextPage } from 'next';
import Head from 'next/head';
import {
	AppShell,
	Navbar,
	Header,
	Title,
	Text,
	ThemeIcon,
	Button,
	Grid,
} from '@mantine/core';
import { BiBook, BiBookAdd, BiUser } from 'react-icons/bi';

import styles from '../styles/Home.module.scss';
import { useState } from 'react';

import Book from '../components/Book';
import { BookInterface, BookStatus } from '../types/interfaces';

enum Option {
	books,
	addBook,
	profile,
}

const Home: NextPage = () => {
	const [menuOption, setMenuOption] = useState<Option>(Option.profile);
	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className={styles.main}>
				<AppShell
					padding="md"
					navbar={
						<Navbar width={{ base: 250 }} height={500} padding="sm">
							<Button
								variant={
									menuOption == Option.books
										? 'light'
										: 'subtle'
								}
								color="gray"
								className={styles.menuOption}
								onClick={() => {
									setMenuOption(Option.books);
								}}
							>
								<ThemeIcon
									className={styles.icon}
									variant="light"
								>
									<BiBook size="20px" />
								</ThemeIcon>

								<Text size="sm" weight={'400'} color="black">
									Books
								</Text>
							</Button>
							<Button
								variant={
									menuOption == Option.addBook
										? 'light'
										: 'subtle'
								}
								color="gray"
								className={styles.menuOption}
								onClick={() => {
									setMenuOption(Option.addBook);
								}}
							>
								<ThemeIcon
									className={styles.icon}
									variant="light"
									color="green"
								>
									<BiBookAdd size="20px" />
								</ThemeIcon>

								<Text size="sm" weight={'400'} color="black">
									Add Book
								</Text>
							</Button>
							<Button
								variant={
									menuOption == Option.profile
										? 'light'
										: 'subtle'
								}
								color="gray"
								className={styles.menuOption}
								onClick={() => {
									setMenuOption(Option.profile);
								}}
							>
								<ThemeIcon
									className={styles.icon}
									variant="light"
									color="grape"
								>
									<BiUser size="20px" />
								</ThemeIcon>

								<Text size="sm" weight={'400'} color="black">
									Your Profile
								</Text>
							</Button>
						</Navbar>
					}
					header={
						<Header height={65} padding="xs">
							<Title order={2}>book.io</Title>
						</Header>
					}
				>
					{menuOption === Option.books && (
						<Grid
							columns={8}
							justify="flex-start"
							gutter="xl"
							style={{
								padding: '10px',
							}}
						>
							{books.map((book: BookInterface) => (
								<Grid.Col span={2}>
									<Book
										title={book.title}
										author={book.author}
										pages={book.pages}
										dateCompleted={book.dateCompleted}
										status={book.status}
									></Book>
								</Grid.Col>
							))}
						</Grid>
					)}
					{menuOption === Option.addBook && <div>Add Book page </div>}
					{menuOption === Option.profile && (
						<div>Profile page page </div>
					)}
				</AppShell>
			</div>
		</div>
	);
};

export default Home;

const books = [
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
	{
		title: 'Atomic Habits',
		author: 'James Clear',
		pages: 200,
		dateCompleted: '',
		status: BookStatus.reading,
	},
];
